package main

import (
	"fmt"
)

//create a struct
type gasEngine struct {
	mpg     uint8
	gallons uint8
	//put another struct like this
	//OwnerInfo owner
	// or like this
	owner
}
//connect two struct
type owner struct{
	name string
}

type electricEngine struct{
	mpkwh uint8
	kwh uint8
}

type engine interface{
	milesLeft() uint8
}



//create a func associate with your struct
func (e gasEngine) milesLeft()uint8{
	return e.gallons*e.mpg
}
func (e electricEngine) milesLeft()uint8{
	return e.mpkwh*e.kwh
}

func canMakeIt(e engine,miles uint8){
	if miles <= e.milesLeft(){
		fmt.Println("You can make it there")
	}else{
		fmt.Println("Need to fuel up first!")
	}
}


func main() {
	//create a var with struct  // or like this gasEngine{25,15}
	// or like this myEngine.mpg =20;
	var myEngine gasEngine = gasEngine{ 25, 15,owner{"Alex"}}
	fmt.Println(myEngine.mpg,myEngine.gallons,myEngine.owner)
																	//you can struct like this but it is not resuable
																	// var myEngine2 = struct{
																	// 	mpg uint8
																	// 	galloons uint8
																	// }{25,18}
																	// fmt.Println(myEngine2)
	//access ur func with the struct
	fmt.Printf("Total miles left in tank :%v\n",myEngine.milesLeft())

	var myElectricEngine electricEngine =electricEngine{1,23}

	canMakeIt(myElectricEngine,56)





}